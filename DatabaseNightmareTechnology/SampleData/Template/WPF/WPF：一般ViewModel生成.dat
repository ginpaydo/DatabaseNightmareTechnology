{"GenerateFileName":"@(Model.Values[\"ControlName\"][0])ViewModel.cs","Discription":"画面定義用の汎用入力データで生成してください。","TemplateBody":"using @(Model.Values[\"AppName\"][0]).Models;\r\nusing Reactive.Bindings;\r\nusing Reactive.Bindings.Extensions;\r\nusing System;\r\nusing Prism.Regions;\r\nusing Prism.Logging;\r\n\r\nnamespace @(Model.Values[\"AppName\"][0]).ViewModels\r\n{\r\n    /// <summary>\r\n    /// @(Model.Values[\"ControlName\"][1])\r\n    /// </summary>\r\n    public class @(Model.Values[\"ControlName\"][0])ViewModel : ViewModelBase\r\n    {\r\n        #region ReactiveProperty\r\n        \r\n        @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n            var property = \"\";\r\n            var comment = \"\";\r\n            var read = \"\";\r\n            var type = \"string\";\r\n            if(item[0]==\"Label\"){\r\n                read = \"ReadOnly\";\r\n                if(!string.IsNullOrWhiteSpace(item[6])){\r\n                    property = item[6];\r\n                    comment = item[9];\r\n                }\r\n            }else if(item[0]==\"TextBox\"){\r\n                property = item[6];\r\n                comment = item[10];\r\n                if(!string.IsNullOrWhiteSpace(item[4])){\r\n                    read = \"ReadOnly\";\r\n                }\r\n            }else if(item[0]==\"RadioButton\"){\r\n                property = item[6];\r\n                comment = item[5];\r\n                type = item[4];\r\n            }\r\n            if(!string.IsNullOrWhiteSpace(property)){\r\n        @:/// <summary>\r\n        @:/// @(comment)\r\n        @:/// </summary>\r\n        @:public @(read)ReactiveProperty<@(type)> @(property) { get; }\r\n        @:\r\n            }\r\n        }\r\n        @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n            var property = \"\";\r\n            var comment = \"\";\r\n            var type = \"string\";\r\n            if(item[0]==\"DataGrid\"){\r\n                property = item[7];\r\n                comment = item[8];\r\n                type = item[6];\r\n            }else if(item[0]==\"ComboBox\"){\r\n                property = item[4];\r\n                comment = item[6];\r\n            }\r\n            if(!string.IsNullOrWhiteSpace(property)){\r\n        @:/// <summary>\r\n        @:/// @(comment)\r\n        @:/// </summary>\r\n        @:public ReadOnlyReactiveCollection<@(type)> @(property) { get; private set; }\r\n        @:\r\n            }\r\n        }\r\n        #endregion\r\n\r\n        #region Command\r\n        \r\n        @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n            var property = \"\";\r\n            var comment = \"\";\r\n            if(item[0]==\"ComboBox\"){\r\n                property = \"Select\" + item[4];\r\n                comment = item[6] + \"選択\";\r\n            }else if(item[0]==\"Button\"){\r\n                property = item[7];\r\n                comment = item[8];\r\n            }\r\n            if(!string.IsNullOrWhiteSpace(property)){\r\n        @:/// <summary>\r\n        @:/// @(comment)\r\n        @:/// </summary>\r\n        @:public ReactiveCommand @(property) { get; }\r\n        @:\r\n            }\r\n        }\r\n        #endregion\r\n\r\n        #region Initialize\r\n        public @(Model.Values[\"ControlName\"][0])ViewModel(ILoggerFacade loggerFacade)\r\n            : base(new @(Model.Values[\"ControlName\"][0])Model, \"@(Model.Values[\"ControlName\"][1])\", loggerFacade)\r\n        {\r\n            var model = Model as @(Model.Values[\"ControlName\"][0])Model;\r\n\r\n            #region 値の連動設定\r\n            // モデルとの対応付け\r\n            @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n                var property = \"\";\r\n                var comment = \"\";\r\n                var read = \"\";\r\n                if(item[0]==\"Label\"){\r\n                    read = \".ToReadOnlyReactiveProperty()\";\r\n                    if(!string.IsNullOrWhiteSpace(item[6])){\r\n                        property = item[6];\r\n                        comment = item[9];\r\n                    }\r\n                }else if(item[0]==\"TextBox\"){\r\n                    property = item[6];\r\n                    comment = item[10];\r\n                    if(!string.IsNullOrWhiteSpace(item[4])){\r\n                        read = \".ToReadOnlyReactiveProperty()\";\r\n                    }\r\n                }else if(item[0]==\"RadioButton\"){\r\n                    property = item[6];\r\n                    comment = item[5];\r\n                }\r\n                if(!string.IsNullOrWhiteSpace(property)){\r\n            @:// @(comment)\r\n            @:@(property) = model.ToReactivePropertyAsSynchronized(\r\n            @:    m => m.@(property)\r\n            @:    )@(read);\r\n            @:\r\n                }\r\n            }\r\n            @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n                var property = \"\";\r\n                var comment = \"\";\r\n                if(item[0]==\"DataGrid\"){\r\n                    property = item[7];\r\n                    comment = item[8];\r\n                }else if(item[0]==\"ComboBox\"){\r\n                    property = item[4];\r\n                    comment = item[6];\r\n                }\r\n                if(!string.IsNullOrWhiteSpace(property)){\r\n            @:// @(comment)\r\n            @:@(property) = model.@(property).ToReadOnlyReactiveCollection();\r\n            @:\r\n                }\r\n            }\r\n            #endregion\r\n\r\n            #region コマンドの動作設定\r\n            // TODO:必要ない場合は削除すること\r\n            // 実行の許可/不許可を制御するIObservable<bool>\r\n            // このValueがtrueかfalseかで制御される\r\n            ReactiveProperty<bool> gate = new ReactiveProperty<bool>(true);\r\n\r\n            @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n                var property = \"\";\r\n                var comment = \"\";\r\n                var isNullCheck = false;\r\n                if(item[0]==\"ComboBox\"){\r\n                    isNullCheck = true;\r\n                    property = \"Select\" + item[4];\r\n                    comment = item[6] + \"選択\";\r\n                }else if(item[0]==\"Button\"){\r\n                    property = item[7];\r\n                    comment = item[8];\r\n                }\r\n                if(!string.IsNullOrWhiteSpace(property)){\r\n                \r\n            @:@(property) = new ReactiveCommand(gate);\r\n            @:@(property).Subscribe(\r\n            @:    async d =>\r\n            @:    {\r\n            @:        Log.Log(\"@(comment)\", Category.Info, Priority.None);\r\n                    if(isNullCheck){\r\n            @:        if (d != null)\r\n            @:        {\r\n            @:            await model.@(property)(d as string);\r\n            @:        }\r\n                  }else{\r\n            @:        await model.@(property)();\r\n                    }\r\n            @:    }\r\n            @:);\r\n                }\r\n            }\r\n            #endregion\r\n        }\r\n        #endregion\r\n    }\r\n}"}