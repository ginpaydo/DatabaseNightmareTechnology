{"GenerateFileName":"@(Model.Values[\"ControlName\"][0])Model.cs","Discription":"画面定義用の汎用入力データで生成してください。","TemplateBody":"using System;\r\nusing System.Collections.ObjectModel;\r\nusing System.Data.SqlClient;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace DatabaseNightmareTechnology.Models\r\n{\r\n    class @(Model.Values[\"AppName\"][0])Model : ModelBase\r\n    {\r\n        #region Fields\r\n\r\n        @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n            var property = \"\";\r\n            var comment = \"\";\r\n            var read = \"\";\r\n            var type = \"string\";\r\n            if(item[0]==\"Label\"){\r\n                read = \"ReadOnly\";\r\n                if(!string.IsNullOrWhiteSpace(item[6])){\r\n                    property = item[6];\r\n                    comment = item[9];\r\n                }\r\n            }else if(item[0]==\"TextBox\"){\r\n                property = item[6];\r\n                comment = item[10];\r\n                if(!string.IsNullOrWhiteSpace(item[4])){\r\n                    read = \"ReadOnly\";\r\n                }\r\n            }else if(item[0]==\"RadioButton\"){\r\n                property = item[6];\r\n                comment = item[5];\r\n                type = item[4];\r\n            }\r\n            if(!string.IsNullOrWhiteSpace(property)){\r\n            var camelProperty = Char.ToUpper(property[0]) + property.Substring(1);\r\n            \r\n        @:private @(type) @(camelProperty);\r\n        @:/// <summary>\r\n        @:/// @(comment)\r\n        @:/// </summary>\r\n        @:public @(type) @(property)\r\n        @:{\r\n        @:    get { return @(camelProperty); }\r\n        @:    set { SetProperty(ref @(camelProperty), value); }\r\n        @:}\r\n        @:\r\n            }\r\n        }\r\n        @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n            var property = \"\";\r\n            var comment = \"\";\r\n            var type = \"string\";\r\n            if(item[0]==\"DataGrid\"){\r\n                property = item[7];\r\n                comment = item[8];\r\n                type = item[6];\r\n            }else if(item[0]==\"ComboBox\"){\r\n                property = item[4];\r\n                comment = item[6];\r\n            }\r\n            if(!string.IsNullOrWhiteSpace(property)){\r\n        @:/// <summary>\r\n        @:/// @(comment)\r\n        @:/// </summary>\r\n        @:public ObservableCollection<@(type)> DirectoryList { get; } = new ObservableCollection<@(type)>();\r\n        @:\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// セーブデータ使用画面\r\n        /// </summary>\r\n        protected override bool UseSaveData\r\n        {\r\n            // TODO:セーブデータ使用画面かどうか記述すること\r\n            get { return true; }\r\n        }\r\n        #endregion\r\n\r\n        #region 初期処理\r\n        \r\n        /// <summary>\r\n        /// コンストラクタ\r\n        /// </summary>\r\n        public @(Model.Values[\"AppName\"][0])Model()\r\n        {\r\n            // TODO:コンストラクタを書くこと（リスト初期化、デフォルトデータや固定リストの設定）\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 画面が表示されたときの処理\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        protected override async Task Activate()\r\n        {\r\n            // TODO:画面が表示されたときの処理を書くこと、データチェックや読み込み処理は不要\r\n            // 何もしない\r\n            await Task.Delay(1);\r\n        }\r\n        \r\n        #endregion\r\n\r\n        #region ViewModel処理\r\n        // TODO:非同期処理の場合、Taskに修正すること\r\n        \r\n        @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n            var property = \"\";\r\n            var comment = \"\";\r\n            var paramComment = \"\";\r\n            var args = \"\";\r\n            if(item[0]==\"ComboBox\"){\r\n                paramComment = \"\\n        /// <param name=\\\"value\\\">選択した値</param>\";\r\n                args = \"string value\";\r\n                property = \"Select\" + item[4];\r\n                comment = item[6] + \"選択\";\r\n            }else if(item[0]==\"Button\"){\r\n                property = item[7];\r\n                comment = item[8];\r\n            }\r\n            \r\n            if(!string.IsNullOrWhiteSpace(property)){\r\n        @:/// <summary>\r\n        @:/// @(comment)\r\n        @:/// </summary>@(paramComment)\r\n        @:public void @(property)(@(args))\r\n        @:{\r\n        @:    // TODO:@(comment)処理を書くこと\r\n        @:}\r\n        @:\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// チェック処理\r\n        /// </summary>\r\n        /// <returns>チェックOKならばtrue</returns>\r\n        protected override bool CheckRequiredFields()\r\n        {\r\n            // TODO:チェック処理を記述すること\r\n            return true;\r\n        }\r\n        #endregion\r\n    }\r\n}"}