{"GenerateFileName":"@(Model.Values[\"ClassName\"][0]).cs","Discription":"※インポートは生成しないので、VisualStudioに書いてもらうこと。\r\n必要な情報\r\n・アプリケーション名\r\n・クラス名、クラスコメント\r\n■フィールド（各1行）\r\n・変数名\r\n・型\r\n・getアクセサ\r\n・setアクセサ(privateを書くとprivateになる)\r\n・初期値(インスタンス作成の場合はnewを書く)\r\n・コメント\r\n■メソッド（各1行）\r\n・アクセス修飾子\r\n・型\r\n・名前\r\n・戻り値の内容（あれば）\r\n・コメント\r\n■引数（各1行、複数可）\r\n・型1\r\n・名前1\r\n・コメント1\r\n・デフォルト引数1（なければ空欄にする）\r\n・型2\r\n・名前2\r\n・コメント2\r\n・デフォルト引数2\r\n…\r\n■メソッド内自由記述\r\n・記述内容（いくつでも）\r\n\r\n■例\r\nAppName,DatabaseNightmareTechnology\r\nClassName,SampleData,サンプルデータ\r\nField#1,Separator,const char,,,'#',区切り文字\r\nField#2,DatabaseEngine,DatabaseEngine,1,private,,対象データベース\r\nField#3,ConnectionString,string,1,1,,接続文字列\r\nField#4,PrefixList,ObservableCollection<string>,1,,new,プレフィクスのリスト\r\nField#5,CommonColumnList,ObservableCollection<string>,1,,new,共通項目のリスト\r\nMethods#11,public,,SampleData,,サンプルデータ\r\nMethods#12,public,string,ReadRawData,なんだろう？,データを読み込む\r\nArguments#12,string,discordUserId,購入希望者のId,,string,authorityId,購入対象のId,1234\r\nFree#11,記述1,記述2\r\nFree#12,まず、こうします,次に、ああします,はいできあがり","TemplateBody":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace @(Model.Values[\"AppName\"][0])\r\n{\r\n    /// <summary>\r\n    /// @(Model.Values[\"ClassName\"][1])\r\n    /// </summary>\r\n    public class @(Model.Values[\"ClassName\"][0])\r\n    {\r\n        #region Field\r\n        \r\n        @foreach(var item in Model.ListedValues[\"Field\"].Values){\r\n        // アクセサ\r\n        var accessor = \"\";\r\n        if(!string.IsNullOrWhiteSpace(item[2])){\r\n            accessor = accessor + \" get;\";\r\n        }\r\n        if(!string.IsNullOrWhiteSpace(item[3])){\r\n            if(item[3] == \"private\"){\r\n                accessor = accessor + \" private\";\r\n            }\r\n            accessor = accessor + \" set;\";\r\n        }\r\n        if(!string.IsNullOrWhiteSpace(accessor)){\r\n            accessor = \" {\" + accessor + \" }\";\r\n        }\r\n        \r\n        // イコール\r\n        var equal = \"\";\r\n        if(!string.IsNullOrWhiteSpace(item[4])){\r\n            if(item[4] == \"new\"){\r\n                equal = equal + \" new \" + item[1] + \"()\";\r\n            }else{\r\n                equal = equal + \" \" + item[4];\r\n            }\r\n        }\r\n        if(!string.IsNullOrWhiteSpace(equal)){\r\n            equal = \" =\" + equal + \";\";\r\n        }\r\n        \r\n        @:/// <summary>\r\n        @:/// @item[5]\r\n        @:/// </summary>\r\n        @:public @item[1] @item[0]@accessor@equal\r\n        @:\r\n        }\r\n        #endregion\r\n        \r\n        #region Method\r\n        @foreach(var key in Model.ListedValues[\"Methods\"].Keys){\r\n            var method = Model.ListedValues[\"Methods\"][key];\r\n            var type = \"\";\r\n            // メソッド\r\n            var argumentsStr = \"\";\r\n            var argumentsComment = \"\";\r\n            if(Model.ListedValues[\"Arguments\"].ContainsKey(key)){\r\n                // 引数\r\n                var argumentsValues = Model.ListedValues[\"Arguments\"][key];\r\n                var numberOfArguments = argumentsValues.Count / 4;\r\n                var defaultStr = \"\";\r\n                for(int i = 0; i < numberOfArguments; i++){\r\n                    if(!string.IsNullOrWhiteSpace(argumentsStr)){\r\n                        argumentsStr = argumentsStr + \", \";\r\n                    }\r\n                    if(!string.IsNullOrWhiteSpace(argumentsValues[i * 4 + 3])){\r\n                        defaultStr = \" = \" + argumentsValues[i * 4 + 3];\r\n                    }\r\n                    argumentsComment = argumentsComment + \"\\n        /// <param name=\\\"\" + argumentsValues[i * 4 + 1] + \"\\\">\" + argumentsValues[i * 4 + 2] + \"</param>\";\r\n                    argumentsStr = argumentsStr + argumentsValues[i * 4 + 0] + \" \" + argumentsValues[i * 4 + 1] + defaultStr;\r\n                }\r\n            }\r\n            argumentsStr = \"(\" + argumentsStr + \")\";\r\n            var returnComment = \"\";\r\n            if(!string.IsNullOrWhiteSpace(method[3])){\r\n                returnComment = \"\\n        /// <returns>\" + method[3] + \"</returns>\";\r\n            }\r\n            var free = \"\";\r\n            if(Model.ListedValues.ContainsKey(\"Free\")){\r\n                if(Model.ListedValues[\"Free\"].ContainsKey(key)){\r\n                    // 自由記述\r\n                    var freeValues = Model.ListedValues[\"Free\"][key];\r\n                    foreach(var freeitem in freeValues){\r\n                        free = free + \"\\n            // \" + freeitem;\r\n                    }\r\n                }\r\n            }\r\n            if(!string.IsNullOrWhiteSpace(method[1])){\r\n                type = \" \" + method[1];\r\n            }\r\n        @:\r\n        @:/// <summary>\r\n        @:/// @method[4]\r\n        @:/// </summary>@argumentsComment@returnComment\r\n        @:@method[0]@type @method[2]@argumentsStr {@free\r\n        @:}\r\n        }\r\n        \r\n        #endregion\r\n    }\r\n}"}