{"GenerateFileName":"ModelBase.cs","Discription":"アプリ設定と同じ汎用入力を適用すればよい。\r\nDropboxを使用する場合の共通モデル。","TemplateBody":"using Prism.Mvvm;\r\nusing System.Collections.ObjectModel;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace @(Model.Values[\"AppName\"][0]).Models\r\n{\r\n    /// <summary>\r\n    /// Modelの共通親クラス\r\n    /// Dropboxと、独自設定ファイルを使う場合の設計\r\n    /// </summary>\r\n    public abstract class ModelBase : BindableBase\r\n    {\r\n        #region Fields\r\n        /// <summary>\r\n        /// 設定ファイル\r\n        /// </summary>\r\n        protected SaveData SaveData { get; set; }\r\n\r\n        private string actionResult;\r\n        /// <summary>\r\n        /// 処理結果メッセージの表示\r\n        /// </summary>\r\n        public string ActionResult\r\n        {\r\n            get { return actionResult; }\r\n            set { SetProperty(ref actionResult, value); }\r\n        }\r\n\r\n        /// <summary>\r\n        /// 処理成功時のメッセージ\r\n        /// </summary>\r\n        protected string SuccessMessage { get; set; }\r\n        \r\n        /// <summary>\r\n        /// 入力チェック失敗時のメッセージ\r\n        /// </summary>\r\n        protected string RequiredMessage { get; set; }\r\n        #endregion\r\n\r\n        #region Initialize\r\n        public ModelBase()\r\n        {\r\n            // 各メッセージの設定\r\n            ActionResult = MessageConstants.ActionResult;\r\n            RequiredMessage = MessageConstants.NotInputFilename;\r\n            SuccessMessage = MessageConstants.ActionSucceed;\r\n        }\r\n        #endregion\r\n\r\n        /// <summary>\r\n        /// 各処理の際に必須入力チェックを行う\r\n        /// 必須項目がある画面ではオーバーライドしてチェック処理を追加する\r\n        /// </summary>\r\n        /// <returns>チェックOKならtrue</returns>\r\n        protected abstract bool CheckRequiredFields();\r\n\r\n        /// <summary>\r\n        /// 単純な保存処理\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">保存するデータ型</typeparam>\r\n        /// <param name=\"correspondencePath\">保存先相対パス(\"/Data\"など、Dropboxまたはローカル保存ディレクトリに対するパス)</param>\r\n        /// <param name=\"filename\">拡張子付きファイル名</param>\r\n        /// <param name=\"data\">保存データ</param>\r\n        /// <param name=\"dataList\">保存成功したらこのリストにファイル名を追加する（指定しなくても良い）</param>\r\n        /// <returns>処理に成功したらtrue</returns>\r\n        protected async Task<bool> SimpleSave<T>(string correspondencePath, string filename, T data, ObservableCollection<string> dataList = null)\r\n        {\r\n            if (SaveData != null)\r\n            {\r\n                if (CheckRequiredFields())\r\n                {\r\n                    // OKならDropboxかローカルに保存\r\n                    await DropboxHelper.MultiSaveAsync(SaveData.DataOutput, filename, data, Constants.ApplicationDirectoryDropbox + correspondencePath, SaveData.LocalDirectory + correspondencePath, SaveData.AccessToken);\r\n                    ActionResult = MessageConstants.ActionSucceed;\r\n\r\n                    // 成功したらリストに追加する\r\n                    if (dataList != null)\r\n                    {\r\n                        if (!dataList.Contains(filename))\r\n                        {\r\n                            dataList.Add(filename);\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                else\r\n                {\r\n                    // 必須項目が未入力\r\n                    ActionResult = RequiredMessage;\r\n                    return false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // セーブデータがない\r\n                ActionResult = MessageConstants.SaveDataNotFound;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// 単純な文字列保存\r\n        /// </summary>\r\n        /// <param name=\"correspondencePath\"></param>\r\n        /// <param name=\"filename\"></param>\r\n        /// <param name=\"data\"></param>\r\n        /// <param name=\"dataList\"></param>\r\n        /// <returns></returns>\r\n        protected async Task<bool> SimpleSaveString(string correspondencePath, string filename, string data, ObservableCollection<string> dataList = null)\r\n        {\r\n            if (SaveData != null)\r\n            {\r\n                if (CheckRequiredFields())\r\n                {\r\n                    // OKならDropboxかローカルに保存\r\n                    await DropboxHelper.MultiSaveStringAsync(SaveData.DataOutput, filename, data, Constants.ApplicationDirectoryDropbox + correspondencePath, SaveData.LocalDirectory + correspondencePath, SaveData.AccessToken);\r\n                    ActionResult = MessageConstants.ActionSucceed;\r\n\r\n                    // 成功したらリストに追加する\r\n                    if (dataList != null)\r\n                    {\r\n                        if (!dataList.Contains(filename))\r\n                        {\r\n                            dataList.Add(filename);\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                else\r\n                {\r\n                    // 必須項目が未入力\r\n                    ActionResult = RequiredMessage;\r\n                    return false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // セーブデータがない\r\n                ActionResult = MessageConstants.SaveDataNotFound;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// 単純な削除処理\r\n        /// 物理削除は行わず、指定したファイルを削除フォルダに移動する\r\n        /// </summary>\r\n        /// <param name=\"correspondencePath\">保存先相対パス(\"/Data\"など、Dropboxまたはローカル保存ディレクトリに対するパス)</param>\r\n        /// <param name=\"filename\">拡張子付きファイル名</param>\r\n        /// <param name=\"dataList\">保存成功したらこのリストにファイル名を追加する（指定しなくても良い）</param>\r\n        /// <returns>処理に成功したらtrue</returns>\r\n        protected async Task<bool> SimpleDelete(string correspondencePath, string filename, ObservableCollection<string> dataList = null)\r\n        {\r\n            if (SaveData != null)\r\n            {\r\n                if (CheckRequiredFields())\r\n                {\r\n                    // OKならDropboxかローカルに保存\r\n                    await DropboxHelper.MultiDeleteFileAsync(SaveData.DataOutput, filename, Constants.TrushDirectory, correspondencePath, Constants.ApplicationDirectoryDropbox, SaveData.LocalDirectory, SaveData.AccessToken);\r\n                    ActionResult = MessageConstants.ActionSucceed;\r\n\r\n                    // 成功したらリストから削除する\r\n                    if (dataList != null)\r\n                    {\r\n                        if (dataList.Contains(filename))\r\n                        {\r\n                            dataList.Remove(filename);\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                else\r\n                {\r\n                    // 必須項目が未入力\r\n                    ActionResult = RequiredMessage;\r\n                    return false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // セーブデータがない\r\n                ActionResult = MessageConstants.SaveDataNotFound;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// ファイル名から拡張子を取り除く（汎用性低い）\r\n        /// </summary>\r\n        /// <param name=\"filename\">ファイル名</param>\r\n        /// <param name=\"extention\">拡張子、指定なしの場合4文字取り除く</param>\r\n        /// <returns></returns>\r\n        protected string RemoveExtension(string filename, string extention = Constants.Extension)\r\n        {\r\n            return filename.Substring(0, filename.Length - extention.Length);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 単純な読み込み処理\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">データ型</typeparam>\r\n        /// <param name=\"correspondencePath\">保存先相対パス(\"/Data\"など、Dropboxまたはローカル保存ディレクトリに対するパス)</param>\r\n        /// <param name=\"filename\">拡張子付きファイル名</param>\r\n        /// <returns>読みこんだデータ</returns>\r\n        protected async Task<T> SimpleLoad<T>(string correspondencePath, string filename)\r\n        {\r\n            return await DropboxHelper.MultiLoadAsync<T>(SaveData.DataOutput, filename, Constants.ApplicationDirectoryDropbox + correspondencePath, SaveData.LocalDirectory + correspondencePath, SaveData.AccessToken);\r\n        }\r\n\r\n        /// <summary>\r\n        /// ファイルリスト作成\r\n        /// </summary>\r\n        /// <param name=\"correspondencePath\">対象ディレクトリ相対パス(\"/Data\"など、Dropboxまたはローカル保存ディレクトリに対するパス)</param>\r\n        /// <param name=\"list\">対象リストの参照</param>\r\n        /// <returns></returns>\r\n        protected async Task<ObservableCollection<string>> SimpleFileList(string correspondencePath, ObservableCollection<string> list = null)\r\n        {\r\n            return await DropboxHelper.GetFileListAsync(SaveData.DataOutput, Constants.ApplicationDirectoryDropbox + correspondencePath, SaveData.LocalDirectory + correspondencePath, SaveData.AccessToken, list);\r\n        }\r\n\r\n        /// <summary>\r\n        /// ファイルを文字列として読みこむ\r\n        /// </summary>\r\n        /// <param name=\"correspondencePath\">対象ディレクトリ相対パス(\"/Data\"など、Dropboxまたはローカル保存ディレクトリに対するパス)</param>\r\n        /// <param name=\"filename\">拡張子付きファイル名</param>\r\n        /// <returns></returns>\r\n        protected async Task<string> SimpleLoadString(string correspondencePath, string filename)\r\n        {\r\n            return await DropboxHelper.MultiLoadStringAsync(SaveData.DataOutput, filename, Constants.ApplicationDirectoryDropbox + correspondencePath, SaveData.LocalDirectory + correspondencePath, SaveData.AccessToken);\r\n        }\r\n\r\n        /// <summary>\r\n        /// trueならばSaveDataを使用する画面\r\n        /// </summary>\r\n        abstract protected bool UseSaveData { get; }\r\n\r\n        #region 画面が表示されたときの処理\r\n        /// <summary>\r\n        /// 画面が表示されたときの処理（共通）\r\n        /// 主に、セーブデータ読み込み\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public virtual async Task ActivateAsync()\r\n        {\r\n            ActionResult = MessageConstants.ActionResult;\r\n            if (UseSaveData)\r\n            {\r\n                // データがあるかチェック\r\n                SaveData = await Json.Load<SaveData>(Constants.DataDirectory, Constants.DataFileName);\r\n\r\n                if (SaveData == null)\r\n                {\r\n                    // セーブデータがない場合\r\n                    ActionResult = MessageConstants.SaveDataNotFound;\r\n                }\r\n            }\r\n\r\n            await Activate();\r\n        }\r\n\r\n        /// <summary>\r\n        /// 画面表示時の処理（画面ごとにカスタム）\r\n        /// </summary>\r\n        protected abstract Task Activate();\r\n        #endregion\r\n\r\n    }\r\n}"}