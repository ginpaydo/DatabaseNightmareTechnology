{"GenerateFileName":"ViewModelBase.cs","Discription":"アプリ設定と同じ汎用入力を適用すればよい。","TemplateBody":"using DatabaseNightmareTechnology.Models;\r\nusing Prism.Logging;\r\nusing Reactive.Bindings;\r\nusing Reactive.Bindings.Extensions;\r\nusing System.ComponentModel;\r\nusing System;\r\n\r\nnamespace @(Model.Values[\"AppName\"][0]).ViewModels\r\n{\r\n    /// <summary>\r\n    /// ViewModelクラスの共通親クラス\r\n    /// </summary>\r\n    public abstract class ViewModelBase : INotifyPropertyChanged\r\n    {\r\n        #region PropertyChanged\r\n#pragma warning disable 0067\r\n        /// <summary>\r\n        /// INotifyPropertyChangedを継承してPropertyChangedを実装しないとメモリリークする\r\n        /// 警告が出るので無視設定する\r\n        /// </summary>\r\n        public event PropertyChangedEventHandler PropertyChanged;\r\n#pragma warning restore 0067\r\n        #endregion\r\n\r\n        /// <summary>\r\n        /// POCO\r\n        /// </summary>\r\n        protected ModelBase Model;\r\n\r\n        /// <summary>\r\n        /// 画面名\r\n        /// </summary>\r\n        protected string Name;\r\n\r\n        /// <summary>\r\n        /// ログ\r\n        /// </summary>\r\n        protected ILoggerFacade Log;\r\n\r\n        /// <summary>\r\n        /// 処理結果\r\n        /// </summary>\r\n        public ReactiveProperty<string> ActionResult { get; }\r\n\r\n        #region Command\r\n        /// <summary>\r\n        /// 表示したときの処理\r\n        /// </summary>\r\n        public ReactiveCommand Activate { get; }\r\n        #endregion\r\n\r\n        public ViewModelBase(string name, ILoggerFacade loggerFacade)\r\n        {\r\n            Model = model;\r\n            Name = name;\r\n            Log = loggerFacade;\r\n            Log.Log($\"{Model.GetType().Name}初期化\", Category.Info, Priority.None);\r\n\r\n            #region 値の連動設定\r\n            ActionResult = Model.ToReactivePropertyAsSynchronized(\r\n                m => m.ActionResult\r\n                );\r\n            #endregion\r\n\r\n            #region コマンドの動作設定\r\n            Activate = new ReactiveCommand();\r\n            Activate.Subscribe(\r\n                async d =>\r\n                {\r\n                    Log.Log($\"{Name}を表示\", Category.Info, Priority.None);\r\n                    await Model.ActivateAsync();\r\n                }\r\n            );\r\n            #endregion\r\n        }\r\n    }\r\n}"}