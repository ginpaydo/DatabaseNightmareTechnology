{"GenerateFileName":"@(Model.Values[\"ControlName\"][0]).xaml","Discription":"画面定義用の汎用入力データで生成してください。","TemplateBody":"@{\r\n// コンバータ宣言を追加する（現在、ラジオボタンのみ）\r\nvar converter = \"\";\r\n    if(Model.ListedValues.ContainsKey(\"Converter\")){\r\n        foreach(var item in Model.ListedValues[\"Converter\"].Values){\r\n            converter = converter + item + \"\\n        <c:\" + item[0] + \" x:Key=\\\"\" + item[1] + \"\\\" />\";\r\n        }\r\n        converter = \"\\n    <!--Resources内にコンバーターの使用を宣言する。-->\\n    <UserControl.Resources>\" + converter + \"\\n    </UserControl.Resources>\";\r\n    }\r\n\r\n// 画面分割の定義\r\nvar grid = \"\";\r\n    if(Model.ListedValues.ContainsKey(\"Grid\")){\r\n        foreach(var item in Model.ListedValues[\"Grid\"].Values){\r\n            grid = grid + \"\\n            <RowDefinition Height=\\\" + item[0] + \\\"/>\";\r\n        }\r\n        grid = \"\\n        <!-- 画面分割の定義 -->\\n        <Grid.RowDefinitions>\" + grid + \"\\n        </Grid.RowDefinitions>\";\r\n    }\r\n}<UserControl x:Class=\"@(Model.Values[\"AppName\"][0]).Views.@(Model.Values[\"ControlName\"][0])\"\r\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n             xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n             xmlns:prism=\"http://prismlibrary.com/\"\r\n             xmlns:i=\"clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\"\r\n             xmlns:c=\"clr-namespace:@(Model.Values[\"AppName\"][0])\"\r\n             prism:ViewModelLocator.AutoWireViewModel=\"True\"\r\n             mc:Ignorable=\"d\"\r\n             xmlns:materialDesign=\"http://materialdesigninxaml.net/winfx/xaml/themes\"\r\n             TextElement.Foreground=\"{DynamicResource MaterialDesignBody}\"\r\n             Background=\"{DynamicResource MaterialDesignPaper}\"\r\n             FontFamily=\"{DynamicResource MaterialDesignFont}\"\r\n             d:DesignHeight=\"450\" d:DesignWidth=\"800\">\r\n    <i:Interaction.Triggers>\r\n        <!-- 画面が表示されたときの処理 -->\r\n        <i:EventTrigger EventName=\"Loaded\">\r\n            <i:InvokeCommandAction Command=\"{Binding Activate}\" />\r\n        </i:EventTrigger>\r\n    </i:Interaction.Triggers>@(converter)\r\n    <Grid>@(grid)\r\n        <StackPanel Margin=\"10\">\r\n            <!-- 見出し -->\r\n            <Label Content=\"@(Model.Values[\"ControlName\"][1])\" HorizontalAlignment=\"Left\" Margin=\"0\" FontSize=\"22\" FontWeight=\"Bold\"/>\r\n            @foreach(var item in Model.ListedValues[\"Parts\"].Values){\r\n                // グリッド指定があれば書く\r\n                var gridStr = \"\";\r\n                if(!string.IsNullOrWhiteSpace(item[1])){\r\n                    gridStr = \" Grid.Row=\\\"\" + item[1] + \"\\\"\";\r\n                }\r\n                // マージン（隣の部品との間隔）指定があれば書く\r\n                var marginStr = \"\";\r\n                if(!string.IsNullOrWhiteSpace(item[3])){\r\n                    if(!string.IsNullOrWhiteSpace(item[2])){\r\n                        marginStr = \" Margin=\\\"\" + item[2] + \",\" + item[3] + \",0,0\\\"\";\r\n                    }else{\r\n                        marginStr = \" Margin=\\\"0,\" + item[3] + \",0,0\\\"\";\r\n                    }\r\n                }else if(!string.IsNullOrWhiteSpace(item[2])){\r\n                        marginStr = \" Margin=\\\"\" + item[2] + \",0,0,0\\\"\";\r\n                }\r\n                var optionStr = gridStr + marginStr;\r\n                if(item[0] == \"Label\"){\r\n                    var fontStr = \"\";\r\n                    if(!string.IsNullOrWhiteSpace(item[4])){\r\n                        fontStr = \" FontWeight=\\\"Bold\\\"\";\r\n                    }\r\n                    fontStr = fontStr + \" HorizontalAlignment=\\\"\" + item[7] + \"\\\"\";\r\n                    fontStr = fontStr + \" FontSize=\\\"\" + item[8] + \"\\\"\";\r\n                    var isBoth = !string.IsNullOrWhiteSpace(item[5]) && !string.IsNullOrWhiteSpace(item[6]);\r\n                    if(isBoth){\r\n            @:<DockPanel@(gridStr)@(marginStr)>\r\n                @:<@(item[0]) Content=\"@(item[5])\"@(fontStr)/>\r\n                @:<@(item[0]) Content=\"{Binding @(item[6]).Value}\"@(fontStr)/>\r\n            @:</DockPanel>\r\n                    }else{\r\n                        if(!string.IsNullOrWhiteSpace(item[5])){\r\n            @:<@(item[0])@(optionStr) Content=\"@(item[5])\"@(fontStr)/>\r\n                        }else if(!string.IsNullOrWhiteSpace(item[6])){\r\n            @:<@(item[0])@(optionStr) Content=\"{Binding @(item[6]).Value}\"@(fontStr)/>\r\n                        }\r\n                    }\r\n                }else if(item[0] == \"StackPanel\"){\r\n            @:<StackPanel@(gridStr)@(marginStr)>\r\n            @:<!-- @(item[4]) -->\r\n            @:</StackPanel>\r\n                }else if(item[0] == \"DockPanel\"){\r\n            @:<DockPanel@(gridStr)@(marginStr)>\r\n            @:<!-- @(item[4]) -->\r\n            @:</DockPanel>\r\n                }else if(item[0] == \"TextBox\"){\r\n                    var readonlyStr = \"\";\r\n                    if(!string.IsNullOrWhiteSpace(item[4])){\r\n                        readonlyStr = \" IsReadOnly=\\\"True\\\"\";\r\n                    }\r\n                    var multiLine = \"\";\r\n                    if(!string.IsNullOrWhiteSpace(item[7])){\r\n                        multiLine = \" AcceptsReturn=\\\"True\\\" Style=\\\"{StaticResource MaterialDesignOutlinedTextFieldTextBox}\\\"\";\r\n                    }\r\n                    var scroll = \"\";\r\n                    if(!string.IsNullOrWhiteSpace(item[8])){\r\n                        scroll = \" VerticalScrollBarVisibility=\\\"Auto\\\"\";\r\n                    }\r\n            @:<DockPanel@(gridStr)@(marginStr)>\r\n                @:<Label Content=\"@(item[5])\"/>\r\n                @:<@(item[0]) Text=\"{Binding @(item[6]).Value}\" materialDesign:HintAssist.Hint=\"@(item[9])\" TextWrapping=\"Wrap\"@(readonlyStr)@(multiLine)@(scroll)/>\r\n            @:</DockPanel>\r\n                }else if(item[0] == \"Border\"){\r\n            @:<@(item[0])@(gridStr)@(marginStr) BorderBrush=\"@(item[4])\" BorderThickness=\"@(item[5])\">\r\n                @:<!-- @(item[6]) -->\r\n            @:</@(item[0])>\r\n                }else if(item[0] == \"DataGrid\"){\r\n            @:<@(item[0])@(gridStr)@(marginStr) ItemsSource=\"@(item[6])\" materialDesign:DataGridAssist.CellPadding=\"@(item[5])\" materialDesign:DataGridAssist.ColumnHeaderPadding=\"@(item[4])\"/>\r\n                }else if(item[0] == \"Button\"){\r\n                    var accent = \"\";\r\n                    if(!string.IsNullOrWhiteSpace(item[4])){\r\n                        accent = \" Style=\\\"{StaticResource MaterialDesignRaisedAccentButton}\\\"\";\r\n                    }\r\n                    var parameter = \"\";\r\n                    if(!string.IsNullOrWhiteSpace(item[6])){\r\n                        parameter = \" CommandParameter=\\\"{@(item[6])}\\\"\";\r\n                    }\r\n            @:<@(item[0])@(gridStr)@(marginStr) Content=\"@(item[5])\" Command=\"{Binding @(item[7])}\"@parameter HorizontalAlignment=\"Right\"@(accent)/>\r\n                }else if(item[0] == \"ComboBox\"){\r\n            @:<DockPanel@(gridStr)@(marginStr)>\r\n                @:<Label Content=\"@(item[5])\"/>\r\n                @:<@(item[0]) Name=\"@(item[4])\" ItemsSource=\"{Binding @(item[4])}\" IsSynchronizedWithCurrentItem=\"True\">\r\n                    @:<i:Interaction.Triggers>\r\n                        @:<!-- 選択したときの処理 -->\r\n                        @:<i:EventTrigger EventName=\"SelectionChanged\">\r\n                            @:<i:InvokeCommandAction Command=\"{Binding Select@(item[4])}\" CommandParameter=\"{Binding ElementName=@(item[4]), Path=SelectedItem}\" />\r\n                        @:</i:EventTrigger>\r\n                    @:</i:Interaction.Triggers>\r\n                @:</@(item[0])>\r\n            @:</DockPanel>\r\n                }else if(item[0] == \"RadioButton\"){\r\n            @:<DockPanel@(gridStr)@(marginStr)>\r\n                var num = (item.Count - 6) / 2;\r\n                for(int i = 0; i < num; i++){\r\n                @:<@(item[0]) Content=\"@(item[i * 2 + 6])\" GroupName=\"@(item[i * 2 + 7])\" IsChecked=\"{Binding @(item[4]).Value, Converter={StaticResource @(item[5])}, ConverterParameter=@(item[i * 2 + 7])}\"/>\r\n                }\r\n            @:</DockPanel>\r\n                }\r\n            }\r\n            <!-- 処理結果表示：必要に応じて変更すること -->\r\n            <Label Content=\"{Binding ActionResult.Value}\" HorizontalAlignment=\"Right\" Margin=\"0,0,10,10\"/>\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>"}