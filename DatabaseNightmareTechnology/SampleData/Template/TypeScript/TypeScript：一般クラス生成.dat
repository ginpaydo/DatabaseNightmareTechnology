{"GenerateFileName":"@(Model.Values[\"ClassName\"][0]).ts","Discription":"必要な情報\r\n・クラス名、クラスコメント\r\n■フィールド（各1行）\r\n・変数名\r\n・型\r\n・getアクセサ(空欄orそれ以外)\r\n・setアクセサ(空欄orそれ以外)\r\n・コメント\r\n■メソッド（各1行）\r\nコンストラクタはコメント以外空にする。\r\nオバロ非対応なので設計時に避けること\r\n・アクセス修飾子\r\n・型\r\n・名前\r\n・戻り値の内容（あれば）\r\n・コメント\r\n■引数（各1行、複数可）\r\n・型1\r\n・名前1\r\n・コメント1\r\n・型2\r\n・名前2\r\n・コメント2\r\n…\r\n■メソッド内自由記述\r\n・記述内容（いくつでも）","TemplateBody":"// @(Model.Values[\"ClassName\"][1])\r\nexport class @(Model.Values[\"ClassName\"][0]){\r\n    // ---- Field ----\r\n    \r\n    @foreach(var item in Model.ListedValues[\"Field\"].Values){\r\n    // アクセサ\r\n    var accessor = \"\";\r\n    if(!string.IsNullOrWhiteSpace(item[3])){\r\n        accessor = accessor + \"    get \" + item[0] + \"(): \" + item[2] + \" {\\n\";\r\n        accessor = accessor + \"        return this.\" + item[1] + \";\\n\";\r\n        accessor = accessor + \"    }\";\r\n    }\r\n    if(!string.IsNullOrWhiteSpace(item[4])){\r\n        if(!string.IsNullOrWhiteSpace(accessor)){\r\n            accessor = accessor + \"\\n\";\r\n        }\r\n        accessor = accessor + \"    set \" + item[0] + \"(\" + item[1] + \": \" + item[2] + \") {\\n\";\r\n        accessor = accessor + \"        this.\" + item[1] + \" = \" + item[1] + \";\\n\";\r\n        accessor = accessor + \"    }\";\r\n    }\r\n    if(!string.IsNullOrWhiteSpace(accessor)){\r\n        accessor = \"\\n\" + accessor;\r\n    }\r\n    \r\n    @:// @item[5]\r\n    @:@item[1]: @item[2];@accessor\r\n    @:\r\n    }\r\n    // ---- Method ----\r\n    @foreach(var key in Model.ListedValues[\"Methods\"].Keys){\r\n        var method = Model.ListedValues[\"Methods\"][key];\r\n        var type = \"\";\r\n        var access = \"\";\r\n        var mname = \"\";\r\n        // メソッド\r\n        var argumentsStr = \"\";\r\n        var argumentsComment = \"\";\r\n        if(Model.ListedValues[\"Arguments\"].ContainsKey(key)){\r\n            // 引数\r\n            var argumentsValues = Model.ListedValues[\"Arguments\"][key];\r\n            var numberOfArguments = argumentsValues.Count / 3;\r\n            for(int i = 0; i < numberOfArguments; i++){\r\n                if(!string.IsNullOrWhiteSpace(argumentsStr)){\r\n                    argumentsStr = argumentsStr + \", \";\r\n                }\r\n                argumentsComment = argumentsComment + \"\\n    // * \" + argumentsValues[i * 3 + 1] + \": \" + argumentsValues[i * 3 + 2];\r\n                argumentsStr = argumentsStr + argumentsValues[i * 3 + 1] + \": \" + argumentsValues[i * 3 + 0];\r\n            }\r\n        }\r\n        argumentsStr = \"(\" + argumentsStr + \")\";\r\n        var returnComment = \"\";\r\n        if(!string.IsNullOrWhiteSpace(method[3])){\r\n            returnComment = \"\\n    // - return: \" + method[3];\r\n        }\r\n        var free = \"\";\r\n        if(Model.ListedValues.ContainsKey(\"Free\")){\r\n            if(Model.ListedValues[\"Free\"].ContainsKey(key)){\r\n                // 自由記述\r\n                var freeValues = Model.ListedValues[\"Free\"][key];\r\n                foreach(var freeitem in freeValues){\r\n                    free = free + \"\\n        // \" + freeitem;\r\n                }\r\n            }\r\n        }\r\n        if(!string.IsNullOrWhiteSpace(method[0])){\r\n            if(method[0] != \"1\"){\r\n                access = method[0] + \" \";\r\n            }\r\n        }\r\n        if(!string.IsNullOrWhiteSpace(method[1])){\r\n            type = \" :\" + method[1];\r\n        }\r\n        mname = method[2];\r\n        if(string.IsNullOrWhiteSpace(mname)){\r\n            mname = \"constructor\";\r\n        }\r\n    @:\r\n    @:// @method[4]@argumentsComment@returnComment\r\n    @:@access@mname@argumentsStr@type {@free\r\n    @:}\r\n    }\r\n    \r\n}"}