{"GenerateFileName":"@(Model.Values[\"ClassName\"][0]).ts","Discription":"生成したものはmodelsフォルダを作って、そこに入れること。\r\n必要な情報\r\n・クラス名、クラスコメント\r\n■フィールド（各1行）\r\n・変数名\r\n・型\r\n・getアクセサ(空欄orそれ以外)\r\n・setアクセサ(空欄orそれ以外)\r\n・コメント\r\n■メソッド（各1行）\r\nコンストラクタはコメント以外空にする。\r\nオバロ非対応なので設計時に避けること\r\n・アクセス修飾子\r\n・型\r\n・名前\r\n・戻り値の内容（あれば）\r\n・コメント\r\n■引数（各1行、複数可）\r\n・型1\r\n・名前1\r\n・コメント1\r\n・型2\r\n・名前2\r\n・コメント2\r\n…\r\n■メソッド内自由記述\r\n・記述内容（いくつでも）","TemplateBody":"@{\r\n    // インポート作成\r\n    var imports = \"\";\r\n    var isManyToOne = false;\r\n    var isCreateDateColumn = false;\r\n    var isUpdateDateColumn = false;\r\n    var manyToOneImports = \"\";\r\n    foreach(var item in Model.ListedValues[\"Field\"].Values){\r\n        if(!string.IsNullOrWhiteSpace(item[5])){\r\n            isManyToOne = true;\r\n            manyToOneImports = manyToOneImports + \"\\nimport \" + item[5] + \" from './\" + item[5] + \"';\";\r\n        }\r\n        if(!string.IsNullOrWhiteSpace(item[11])){\r\n            if(item[11] == \"1\"){\r\n                isCreateDateColumn = true;\r\n            }else if(item[11] == \"2\"){\r\n                isUpdateDateColumn = true;\r\n            }\r\n        }\r\n    }\r\n    if(isManyToOne){\r\n        imports = imports + \", ManyToOne\";\r\n    }\r\n    if(isCreateDateColumn){\r\n        imports = imports + \", CreateDateColumn\";\r\n    }\r\n    if(isUpdateDateColumn){\r\n        imports = imports + \", UpdateDateColumn\";\r\n    }\r\n    var fields = \"\";\r\n}\r\nimport { Entity, PrimaryGeneratedColumn, Column@(imports) } from 'typeorm';\r\n@manyToOneImports\r\n// @(Model.Values[\"TableName\"][0])テーブル\r\n// @(Model.Values[\"ClassName\"][1])\r\n@@Entity(\"@(Model.Values[\"TableName\"][0])\")\r\nexport default class @(Model.Values[\"ClassName\"][0]) {\r\n    @foreach(var item in Model.ListedValues[\"Field\"].Values){\r\n    // アノテーション作成\r\n    var annotations = \"\";\r\n    var nullable = \"\";\r\n    var ronly = \"\";\r\n    \r\n    // columnの中身作成\r\n    var column = \"\";\r\n    // commentは必ず存在していること\r\n    column = column + \",\\n        comment: '\" + item[12] + \"'\";\r\n    \r\n    // nullable\r\n    if(!string.IsNullOrWhiteSpace(item[6])){\r\n        column = column + \",\\n        nullable: true\";\r\n    }\r\n    // length\r\n    if(!string.IsNullOrWhiteSpace(item[7])){\r\n        column = column + \",\\n        length: \" + item[7];\r\n    }\r\n    // defau\r\n    if(!string.IsNullOrWhiteSpace(item[8])){\r\n        var defau = item[8];\r\n        if(item[1] == \"string\"){\r\n            defau = \"'\" + defau + \"'\";\r\n        }\r\n        column = column + \",\\n        default: \" + defau;\r\n    }\r\n    // unique\r\n    if(!string.IsNullOrWhiteSpace(item[9])){\r\n        column = column + \",\\n        unique: true\";\r\n    }\r\n    \r\n    // その他\r\n    // ronly\r\n    if(!string.IsNullOrWhiteSpace(item[10])){\r\n        ronly = \"readonly \";\r\n    }\r\n    \r\n    // アノテーション作成（typeは必ずある, ManyToOneはnameなし）\r\n    if(!string.IsNullOrWhiteSpace(item[4])){\r\n        annotations = annotations + \"\\n    @PrimaryGeneratedColumn({\\n        type: '\" + item[3] + \"'\" + column + \"\\n    })\";\r\n    }else if(!string.IsNullOrWhiteSpace(item[5])){\r\n        annotations = annotations + \"\\n    @ManyToOne(type => \" + item[5] + \")\";\r\n    }else if(!string.IsNullOrWhiteSpace(item[11])){\r\n        var temp = \"({\\n        name: '\" + item[2] + \"',\\n        type: '\" + item[3] + \"'\" + column + \"\\n    })\";\r\n        if(item[11] == \"1\"){\r\n            annotations = annotations + \"\\n    @CreateDateColumn\" + temp;\r\n        }else if(item[11] == \"2\"){\r\n            annotations = annotations + \"\\n    @UpdateDateColumn\" + temp;\r\n        }\r\n    }else{\r\n        annotations = annotations + \"\\n    @Column({\\n        name: '\" + item[2] + \"',\\n        type: '\" + item[3] + \"'\" + column + \"\\n    })\";\r\n    }\r\n    \r\n    @:// @item[12]@annotations\r\n    @:@ronly@item[0]: @item[1];\r\n    @:\r\n    }\r\n}"}