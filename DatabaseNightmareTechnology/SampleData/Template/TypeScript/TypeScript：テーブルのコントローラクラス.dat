{"GenerateFileName":"@(Model.Values[\"ClassName\"][0])Controller.ts","Discription":"生成したものはcontrollersフォルダを作って、そこに入れること。\r\n必要な情報\r\n・クラス名、クラスコメント\r\n■フィールド（各1行）\r\n・変数名\r\n・型\r\n・getアクセサ(空欄orそれ以外)\r\n・setアクセサ(空欄orそれ以外)\r\n・コメント\r\n■メソッド（各1行）\r\nコンストラクタはコメント以外空にする。\r\nオバロ非対応なので設計時に避けること\r\n・アクセス修飾子\r\n・型\r\n・名前\r\n・戻り値の内容（あれば）\r\n・コメント\r\n■引数（各1行、複数可）\r\n・型1\r\n・名前1\r\n・コメント1\r\n・型2\r\n・名前2\r\n・コメント2\r\n…\r\n■メソッド内自由記述\r\n・記述内容（いくつでも）","TemplateBody":"import @(Model.Values[\"ClassName\"][0]) from '../models/@(Model.Values[\"ClassName\"][0])';\r\nimport DbStore from '../DbStore';\r\n\r\nexport default class @(Model.Values[\"ClassName\"][0])Controller {\r\n\r\n    // GET /@(Model.Values[\"ClassName\"][2])\r\n    // 全件取得（offset, limitをパラメータに受け取ることも可能）\r\n    static all(): Promise<@(Model.Values[\"ClassName\"][0])[]> {\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const connection = await DbStore.createConnection();\r\n                let repository = connection.getRepository(@(Model.Values[\"ClassName\"][0]));\r\n\r\n                // 存在チェック\r\n                const allData = await repository.find();\r\n                resolve(allData);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    // GET /@(Model.Values[\"ClassName\"][2])/{id}\r\n    // 指定したIDのタスクを取得する\r\n    static get(id: number): Promise<@(Model.Values[\"ClassName\"][0])> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let result: @(Model.Values[\"ClassName\"][0]);\r\n\r\n            try {\r\n                const connection = await DbStore.createConnection();\r\n                let repository = connection.getRepository(@(Model.Values[\"ClassName\"][0]));\r\n\r\n                // 存在チェック\r\n                const result = await repository.findOne(id);\r\n                if (!result) {\r\n                    reject({\r\n                        code: 404,\r\n                        message: '指定IDが見つかりませんでした'\r\n                    })\r\n                }\r\n                resolve(result);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    // POST /@(Model.Values[\"ClassName\"][2])\r\n    // タスクを登録する\r\n    static add(param: @(Model.Values[\"ClassName\"][0])): Promise<@(Model.Values[\"ClassName\"][0])> {\r\n        \r\n        return new Promise(async (resolve, reject) => {\r\n            let data = param;\r\n            let result: @(Model.Values[\"ClassName\"][0]);\r\n\r\n            try {\r\n                const connection = await DbStore.createConnection();\r\n                let repository = connection.getRepository(@(Model.Values[\"ClassName\"][0]));\r\n                result = await repository.save(data);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n            resolve(result);\r\n        });\r\n    }\r\n\r\n    // PUT /@(Model.Values[\"ClassName\"][2])/{id}\r\n    // 指定したIDのタスクを更新する\r\n    static update(id: number, param: @(Model.Values[\"ClassName\"][0])): Promise<@(Model.Values[\"ClassName\"][0])> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let data = param;\r\n            let result: @(Model.Values[\"ClassName\"][0]);\r\n\r\n            try {\r\n                const connection = await DbStore.createConnection();\r\n                let repository = connection.getRepository(@(Model.Values[\"ClassName\"][0]));\r\n\r\n                // 存在チェック\r\n                const exist = await repository.findOne(data.id);\r\n                if (!exist) {\r\n                    reject({\r\n                        code: 404,\r\n                        message: '指定IDが見つかりませんでした'\r\n                    })\r\n                }\r\n                // 更新\r\n                result = await repository.save(data);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n            resolve(result);\r\n        });\r\n    }\r\n\r\n    // DELETE /@(Model.Values[\"ClassName\"][2])/{id}\r\n    // 指定したIDのタスクを削除する\r\n    static delete(id: number): Promise<@(Model.Values[\"ClassName\"][0])> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let result: @(Model.Values[\"ClassName\"][0]);\r\n\r\n            try {\r\n                const connection = await DbStore.createConnection();\r\n                let repository = connection.getRepository(@(Model.Values[\"ClassName\"][0]));\r\n\r\n                // 存在チェック\r\n                const exist = await repository.findOne(id);\r\n                if (!exist) {\r\n                    reject({\r\n                        code: 404,\r\n                        message: '指定IDが見つかりませんでした'\r\n                    })\r\n                }\r\n                // 削除\r\n                result = await repository.remove(exist);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n            resolve(result);\r\n        });\r\n    }\r\n}"}